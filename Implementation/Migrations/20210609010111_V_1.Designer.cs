// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WinScout.Models;

namespace WinScout.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20210609010111_V_1")]
    partial class V_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PosetilacProizvod", b =>
                {
                    b.Property<int>("FavouritesID")
                        .HasColumnType("int");

                    b.Property<int>("SubscribersID")
                        .HasColumnType("int");

                    b.HasKey("FavouritesID", "SubscribersID");

                    b.HasIndex("SubscribersID");

                    b.ToTable("PosetilacProizvod");
                });

            modelBuilder.Entity("WinScout.Models.Ban", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Ban");
                });

            modelBuilder.Entity("WinScout.Models.Komentar", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrojOdgovora")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasColumnName("Redni_Broj");

                    b.Property<int?>("KomentarID")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<bool>("Odobren")
                        .HasColumnType("bit");

                    b.Property<int>("ProizvodID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("KomentarID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("ProizvodID");

                    b.ToTable("Komentar");
                });

            modelBuilder.Entity("WinScout.Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.Property<bool>("Odobren")
                        .HasColumnType("bit");

                    b.Property<bool>("Online")
                        .HasColumnType("bit")
                        .HasColumnName("Activity_Status");

                    b.Property<int?>("PIN")
                        .HasColumnType("int");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Password_Hash");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("Password_Salt");

                    b.Property<string>("TipKorisnika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tip_Korisnika");

                    b.HasKey("ID");

                    b.ToTable("Korisnik");

                    b.HasDiscriminator<string>("TipKorisnika").HasValue("Korisnik");
                });

            modelBuilder.Entity("WinScout.Models.Lokacija", b =>
                {
                    b.Property<int>("ProdavacID")
                        .HasColumnType("int");

                    b.Property<double>("X")
                        .HasColumnType("float")
                        .HasColumnName("Geo_Sirina");

                    b.Property<double>("Y")
                        .HasColumnType("float")
                        .HasColumnName("Geo_Duzina");

                    b.HasKey("ProdavacID");

                    b.ToTable("Lokacija");
                });

            modelBuilder.Entity("WinScout.Models.Proizvod", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrojKomentara")
                        .HasColumnType("int");

                    b.Property<decimal>("Cena")
                        .HasColumnType("money");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Naziv_Proizvoda");

                    b.Property<double?>("Ocena")
                        .HasColumnType("float");

                    b.Property<int>("OcenaKoeficijent")
                        .HasColumnType("int");

                    b.Property<bool>("Odobren")
                        .HasColumnType("bit");

                    b.Property<string>("OpisProizvoda")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProdavacID")
                        .HasColumnType("int");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Slika");

                    b.Property<string>("TipProizvoda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tip_Proizvoda");

                    b.HasKey("ID");

                    b.HasIndex("ProdavacID");

                    b.ToTable("Proizvod");

                    b.HasDiscriminator<string>("TipProizvoda").HasValue("Proizvod");
                });

            modelBuilder.Entity("WinScout.Models.Administrator", b =>
                {
                    b.HasBaseType("WinScout.Models.Korisnik");

                    b.Property<string>("Slika")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Slika");

                    b.ToTable("Korisnik");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("WinScout.Models.Posetilac", b =>
                {
                    b.HasBaseType("WinScout.Models.Korisnik");

                    b.ToTable("Korisnik");

                    b.HasDiscriminator().HasValue("Posetilac");
                });

            modelBuilder.Entity("WinScout.Models.Prodavac", b =>
                {
                    b.HasBaseType("WinScout.Models.Korisnik");

                    b.Property<string>("Adresa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mesto")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Grad");

                    b.Property<string>("Slika")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Slika");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Korisnik");

                    b.HasDiscriminator().HasValue("Prodavac");
                });

            modelBuilder.Entity("WinScout.Models.Prozor", b =>
                {
                    b.HasBaseType("WinScout.Models.Proizvod");

                    b.Property<double>("DebljinaStakla")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Debljina_stakla");

                    b.Property<double>("Duzina")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Duzina");

                    b.Property<double>("Koeficijent")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Koeficijent_Prolaza_Toplote");

                    b.Property<int>("Komore")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Broj_Komora");

                    b.Property<string>("Materijal")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Materijal");

                    b.Property<bool>("Mrezica")
                        .HasColumnType("bit")
                        .HasColumnName("Mrezica");

                    b.Property<int?>("Paneli")
                        .HasColumnType("int")
                        .HasColumnName("Broj_Panela");

                    b.Property<bool>("Roletne")
                        .HasColumnType("bit")
                        .HasColumnName("Roletne");

                    b.Property<double>("Sirina")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Sirina");

                    b.Property<string>("SistemOtvaranja")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SistemOtvaranja");

                    b.Property<string>("Staklo")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Staklo");

                    b.Property<string>("TipProzora")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tip_Prozora");

                    b.ToTable("Proizvod");

                    b.HasDiscriminator().HasValue("Prozor");
                });

            modelBuilder.Entity("WinScout.Models.Vrata", b =>
                {
                    b.HasBaseType("WinScout.Models.Proizvod");

                    b.Property<double?>("DebljinaStakla")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Debljina_stakla");

                    b.Property<double>("Duzina")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Duzina");

                    b.Property<double>("Koeficijent")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Koeficijent_Prolaza_Toplote");

                    b.Property<int>("Komore")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("int")
                        .HasColumnName("Broj_Komora");

                    b.Property<string>("Materijal")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Materijal");

                    b.Property<string>("Primena")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Primena");

                    b.Property<double>("Sirina")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float")
                        .HasColumnName("Sirina");

                    b.Property<string>("Staklo")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Staklo");

                    b.Property<string>("TipVrata")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tip_Vrata");

                    b.ToTable("Proizvod");

                    b.HasDiscriminator().HasValue("Vrata");
                });

            modelBuilder.Entity("PosetilacProizvod", b =>
                {
                    b.HasOne("WinScout.Models.Proizvod", null)
                        .WithMany()
                        .HasForeignKey("FavouritesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinScout.Models.Posetilac", null)
                        .WithMany()
                        .HasForeignKey("SubscribersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WinScout.Models.Komentar", b =>
                {
                    b.HasOne("WinScout.Models.Komentar", "Iznad")
                        .WithMany("Odgovori")
                        .HasForeignKey("KomentarID");

                    b.HasOne("WinScout.Models.Korisnik", "Korisnik")
                        .WithMany("Komentari")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WinScout.Models.Proizvod", "Proizvod")
                        .WithMany("Komentari")
                        .HasForeignKey("ProizvodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Iznad");

                    b.Navigation("Korisnik");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("WinScout.Models.Lokacija", b =>
                {
                    b.HasOne("WinScout.Models.Prodavac", "Prodavac")
                        .WithOne("Lokacija")
                        .HasForeignKey("WinScout.Models.Lokacija", "ProdavacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prodavac");
                });

            modelBuilder.Entity("WinScout.Models.Proizvod", b =>
                {
                    b.HasOne("WinScout.Models.Prodavac", "Prodavac")
                        .WithMany("Proizvodi")
                        .HasForeignKey("ProdavacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prodavac");
                });

            modelBuilder.Entity("WinScout.Models.Komentar", b =>
                {
                    b.Navigation("Odgovori");
                });

            modelBuilder.Entity("WinScout.Models.Korisnik", b =>
                {
                    b.Navigation("Komentari");
                });

            modelBuilder.Entity("WinScout.Models.Proizvod", b =>
                {
                    b.Navigation("Komentari");
                });

            modelBuilder.Entity("WinScout.Models.Prodavac", b =>
                {
                    b.Navigation("Lokacija");

                    b.Navigation("Proizvodi");
                });
#pragma warning restore 612, 618
        }
    }
}
